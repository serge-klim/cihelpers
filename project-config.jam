project user-config ;
import os ;
local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
local BOOST_VER = [ os.environ BOOST_VER ] ;
local BOOST_LIBS = [ os.environ BOOST_LIBS ] ;
local CXX = [ os.environ CXX ] ;

if [ MATCH ^(clang) : $(CXX) ]
{

using clang : : $(CXX) :
				 <cxxflags>-stdlib=libc++
				 <linkflags>-lc++
				 <linkflags>-lc++abi
				 <linkflags>-lm
				 <linkflags>-lc
						  ;
}

if [ os.name ] in NT
{

using msvc : : :
	  <cxxflags>/permissive-
	  <cxxflags>/analyze
#	  <cxxflags>/std:c++latest
     ;

lib odbc32 : : ;
lib odbccp32 : : ;

alias odbc
	: odbc32 odbccp32
;

}
else
{

lib odbc : : ;

}

import boost ;
using boost : $(BOOST_VER) : <include>$(BOOST_ROOT) <library>$(BOOST_LIBS) ;


project
    : requirements
	   <variant>debug:<toolset>gcc:<define>_GLIBCXX_SANITIZE_VECTOR
	   <variant>debug:<toolset>gcc:<define>_GLIBCXX_ASSERTIONS
	   <variant>debug:<toolset>gcc:<define>_GLIBCXX_DEBUG 
	   <variant>debug:<toolset>gcc:<define>_GLIBCXX_DEBUG_PEDANTIC
	   <variant>asan:<cxxflags>-O1
	   <variant>asan:<cxxflags>-fno-limit-debug-info
	   <variant>asan:<cxxflags>-fno-omit-frame-pointer
	   <variant>asan:<cxxflags>-fsanitize=address
	   <variant>asan:<linkflags>-fsanitize=leak
	   <variant>asan:<linkflags>-fsanitize=address
	   <variant>opencppcoverage:<testing.launcher>trunner.cmd
    ;

#project : requirements <testing.arg>"--output_format=XML --log_sink=tests.xml" ;

variant opencppcoverage : profile : ;
variant asan : debug : ;
variant clang-prof : debug :  ;
